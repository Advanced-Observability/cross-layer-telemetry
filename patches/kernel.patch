diff --git a/include/net/sock.h b/include/net/sock.h
index 0b6266fd6bf6..4ffd5f54ac16 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -526,6 +526,8 @@ struct sock {
 	struct bpf_local_storage __rcu	*sk_bpf_storage;
 #endif
 	struct rcu_head		sk_rcu;
+	__be64			sk_clt_traceId[2];
+	__be64			sk_clt_spanId;
 };
 
 enum sk_pacing {
diff --git a/include/uapi/linux/ioam6.h b/include/uapi/linux/ioam6.h
index 0a1e09e43c28..8c3a11275c5e 100644
--- a/include/uapi/linux/ioam6.h
+++ b/include/uapi/linux/ioam6.h
@@ -117,6 +117,9 @@ struct ioam6_trace_hdr {
 #error "Please fix <asm/byteorder.h>"
 #endif
 
+	__be64	traceId[2];
+	__be64	spanId;
+
 #define IOAM6_TRACE_DATA_SIZE_MAX 244
 	__u8	data[0];
 } __attribute__((packed));
diff --git a/include/uapi/linux/ioam6_genl.h b/include/uapi/linux/ioam6_genl.h
index 0dd94b26448d..5481fda736e9 100644
--- a/include/uapi/linux/ioam6_genl.h
+++ b/include/uapi/linux/ioam6_genl.h
@@ -25,6 +25,11 @@ enum {
 
 	IOAM6_ATTR_PAD,
 
+	IOAM6_ATTR_CLT_SOCKFD,		/* unsigned int */
+	IOAM6_ATTR_CLT_TRACEID_HIGH,	/* u64 */
+	IOAM6_ATTR_CLT_TRACEID_LOW,	/* u64 */
+	IOAM6_ATTR_CLT_SPANID,		/* u64 */
+
 	__IOAM6_ATTR_MAX,
 };
 #define IOAM6_ATTR_MAX (__IOAM6_ATTR_MAX - 1)
@@ -42,6 +47,9 @@ enum {
 
 	IOAM6_CMD_NS_SET_SCHEMA,
 
+	IOAM6_CMD_CLT_SET,
+	IOAM6_CMD_CLT_UNSET,
+
 	__IOAM6_CMD_MAX,
 };
 #define IOAM6_CMD_MAX (__IOAM6_CMD_MAX - 1)
diff --git a/net/ipv6/ioam6.c b/net/ipv6/ioam6.c
index 57dcde80cda4..d82494710745 100644
--- a/net/ipv6/ioam6.c
+++ b/net/ipv6/ioam6.c
@@ -92,6 +92,10 @@ static const struct nla_policy ioam6_genl_policy[IOAM6_ATTR_MAX + 1] = {
 	[IOAM6_ATTR_SC_DATA]	= { .type = NLA_BINARY,
 				    .len = IOAM6_MAX_SCHEMA_DATA_LEN },
 	[IOAM6_ATTR_SC_NONE]	= { .type = NLA_FLAG },
+	[IOAM6_ATTR_CLT_SOCKFD]	= { .type = NLA_U32 },
+	[IOAM6_ATTR_CLT_TRACEID_HIGH]	= { .type = NLA_U64 },
+	[IOAM6_ATTR_CLT_TRACEID_LOW]	= { .type = NLA_U64 },
+	[IOAM6_ATTR_CLT_SPANID]	= { .type = NLA_U64 },
 };
 
 static int ioam6_genl_addns(struct sk_buff *skb, struct genl_info *info)
@@ -511,6 +515,57 @@ static int ioam6_genl_ns_set_schema(struct sk_buff *skb, struct genl_info *info)
 	return err;
 }
 
+static int ioam6_genl_clt_toggle(struct sk_buff *skb, struct genl_info *info)
+{
+	u64 trId_h, trId_l, spanId;
+	struct socket *sock;
+	int err = -EINVAL;
+	struct fd f;
+
+	if (!info->attrs[IOAM6_ATTR_CLT_SOCKFD])
+		goto out;
+
+	if (!info->attrs[IOAM6_ATTR_CLT_TRACEID_HIGH] &&
+	    !info->attrs[IOAM6_ATTR_CLT_TRACEID_LOW] &&
+	    !info->attrs[IOAM6_ATTR_CLT_SPANID]) {
+		trId_h = 0;
+		trId_l = 0;
+		spanId = 0;
+	} else if (!info->attrs[IOAM6_ATTR_CLT_TRACEID_HIGH] ||
+	    	   !info->attrs[IOAM6_ATTR_CLT_TRACEID_LOW] ||
+	    	   !info->attrs[IOAM6_ATTR_CLT_SPANID]) {
+		goto out;
+	} else {
+		trId_h = nla_get_u64(info->attrs[IOAM6_ATTR_CLT_TRACEID_HIGH]);
+		trId_l = nla_get_u64(info->attrs[IOAM6_ATTR_CLT_TRACEID_LOW]);
+		spanId = nla_get_u64(info->attrs[IOAM6_ATTR_CLT_SPANID]);
+	}
+
+	err = -EBADF;
+	f = fdget_raw(nla_get_u32(info->attrs[IOAM6_ATTR_CLT_SOCKFD]));
+	if (!f.file)
+		goto out;
+
+	err = -ENOTSOCK;
+	if (!S_ISSOCK(f.file->f_path.dentry->d_inode->i_mode))
+		goto release;
+
+	sock = sock_from_file(f.file, &err);
+	if (!sock || !sock->sk)
+		goto release;
+
+	err = 0;
+	/*TODO hold a (sock) lock? */
+	sock->sk->sk_clt_traceId[0] = cpu_to_be64(trId_h);
+	sock->sk->sk_clt_traceId[1] = cpu_to_be64(trId_l);
+	sock->sk->sk_clt_spanId = cpu_to_be64(spanId);
+
+release:
+	fdput(f);
+out:
+	return err;
+}
+
 static const struct genl_ops ioam6_genl_ops[] = {
 	{
 		.cmd	= IOAM6_CMD_ADD_NAMESPACE,
@@ -558,6 +613,18 @@ static const struct genl_ops ioam6_genl_ops[] = {
 		.doit	= ioam6_genl_ns_set_schema,
 		.flags	= GENL_ADMIN_PERM,
 	},
+	{
+		.cmd	= IOAM6_CMD_CLT_SET,
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+		.doit	= ioam6_genl_clt_toggle,
+		.flags	= GENL_ADMIN_PERM,
+	},
+	{
+		.cmd	= IOAM6_CMD_CLT_UNSET,
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+		.doit	= ioam6_genl_clt_toggle,
+		.flags	= GENL_ADMIN_PERM,
+	},
 };
 
 static struct genl_family ioam6_genl_family __ro_after_init = {
diff --git a/net/ipv6/ioam6_iptunnel.c b/net/ipv6/ioam6_iptunnel.c
index e19b5c3aa792..be0a1e0096aa 100644
--- a/net/ipv6/ioam6_iptunnel.c
+++ b/net/ipv6/ioam6_iptunnel.c
@@ -190,6 +190,12 @@ static int ioam6_do_inline(struct sk_buff *skb, struct ioam6_lwt_encap *tuninfo)
 					   + sizeof(struct ipv6_hopopt_hdr) + 2
 					   + sizeof(struct ioam6_hdr));
 
+	if (skb->sk) {
+		trace->traceId[0] = skb->sk->sk_clt_traceId[0];
+		trace->traceId[1] = skb->sk->sk_clt_traceId[1];
+		trace->spanId = skb->sk->sk_clt_spanId;
+	}
+
 	ns = ioam6_namespace(dev_net(skb_dst(skb)->dev), trace->namespace_id);
 	if (ns)
 		ioam6_fill_trace_data(skb, ns, trace);
